[init]
	defaultBranch = main

[user]
	name = ____ _____
	email = ____@_____.___

[alias]
    # these originally based on ideas presented here: 
    #   https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs
    # their updates here yet to be revised in, but planned
    #   https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298

    lg = lg1

    lg1 = lg1-specific --all
    lg2 = lg2-specific --all
    lg3 = lg3-specific --all
    lg1t = lg1-specific --all --author-date-order
    lg2t = lg2-specific --all --author-date-order
    lg3t = lg3-specific --all --author-date-order

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    lgu-specific = !git log --graph --abbrev-commit --decorate --format=format:\"%C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset) - %C(bold blue)"$(git gru)"%h%C(reset)\"

    # this was older git where default branch upon init was 'master' and [init] block wasn't yet available
    initmain = !git init && git symbolic-ref HEAD refs/heads/main
    timemachine = !"git-timemachine $3"
    ignore = "!f() { echo $1 >> .gitignore; }; f"
    # ignore from https://devtut.github.io/git/aliases.html

    # some fun/injokes. Benjamin is a friend and former colleague
    Benjamin = "!f() { echo 'git forked'; }; f"
    forked = "!f() { echo 'This is all Benjamins fault'; }; f"
    fork = "!f() { echo "This is all ${1}\\'s fault"; }; f"
    fuck = "!f() { echo "This is all ${1}\\'s fault"; }; f"

    # these from Carlos Laviola - https://github.com/claviola
#    gru = !printf \"https://%s/commit/\" "$(git config --get remote.origin.url | sed -e 's#^git@\\(.*\\):\\(.*\\)\\.git$#\\1/\\2#')"
#    Carlos' original above handled remote.origin.url in the form of 
#       git@github.com:nemothorx/neon-git.git
#    My revision below also handles the form of 
#       https://github.com/nemothorx/neon-git.gi
#   These should work fine for gitlab too.
#   May need to be adjusted for other git hosting solutions
#       git.kernel.org for linux kernel fails - requires "s#git://#https://#" (easy), and retaining ".git" at the end (not easy, as github requires it gone)
    gru = !printf \"https://%s/commit/\" "$(git config --get remote.origin.url | sed -e 's#^git@\\(.*\\):\\(.*\\)\\.git$#\\1/\\2# ; s#^https://\\(.*\\).git#\\1#')"
    ll = !git log --color --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%al>%Creset "$(git gru)%h%n\""
    sl = !git show --color --pretty=format:\"%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%al>%Creset%n%n"$(git gru)"%h%n%n%b\"
    #

    # github style ls - alias version
    # note: this ALWAYS runs from the root of the repo. Unsure if this can be changed
    # the standalone ghls scripts run from the PWD as expected
    ghls = "!git status --short --branch --show-stash 2>/dev/null ; /bin/pwd ; ls -1A --file-type --group-directories-first | grep -v '.git/' | while read entry ; do echo \"$entry ~ $(git -c color.ui=always log -n 1  --format=format:\"%C(bold cyan)%s ~ %C(yellow)%ar%C(reset)\" -- \"$entry\")\" ; done | column -t -s~"

    # when I want vimdiff, but dont want it to be my difftool (because meld)
    vimdiff = !git difftool --tool=vimdiff

    # cam = commit automessage (also "commit -a -m").
    # any params on the commandline are added to the end automatically but none requred. safe to call as "git cam"
    cam = !"git-autocommit.sh"

